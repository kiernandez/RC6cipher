def rotate_left(x, shift, bits):
    """Rotacja bitowa w lewo o określoną liczbę bitów."""
    x = int(x)
    return ((x << shift) | (x >> (bits - shift))) & (2**bits - 1)

def key_schedule(Key):
    P32 = 0xB7E15163
    Q32 = 0x9E3779B9
    w = 32  # Rozmiar słowa w bitach

    # Tworzenie tablicy S[] o 44 elementach (2 * r + 4)
    S = [P32]
    for i in range(1, 44):
        S.append((S[i - 1] + Q32) % (2**w))

    # Podział klucza na 32-bitowe słowa (little-endian)
    c = len(Key) // 4  # Liczba 32-bitowych słów
    L = [0] * c
    for i in range(c):
        L[i] = int.from_bytes(Key[4 * i:4 * (i + 1)], byteorder='little')

    # Faza mieszania tablicy S[] i klucza L[]
    A = B = i = j = 0
    v = 3 * max(c, len(S))  # Liczba iteracji mieszania

    for _ in range(v):
        A = S[i] = rotate_left((S[i] + A + B) % (2**w), 3, w)
        B = L[j] = rotate_left((L[j] + A + B) % (2**w), (A + B) % w, w)
        i = (i + 1) % len(S)
        j = (j + 1) % c

    return S

def RC6_encrypt(plaintext, S):
    # Podział plaintext na bloki A, B, C, D (little-endian)
    A = int.from_bytes(plaintext[0:4], byteorder='little')
    B = int.from_bytes(plaintext[4:8], byteorder='little')
    C = int.from_bytes(plaintext[8:12], byteorder='little')
    D = int.from_bytes(plaintext[12:16], byteorder='little')

    # Wstępne dodanie wartości kluczy rundowych
    B = (B + S[0]) % 2**32
    D = (D + S[1]) % 2**32

    print(f"Po wstępnym dodaniu kluczy rundowych: A={A:08X}, B={B:08X}, C={C:08X}, D={D:08X}")

    # Rundy szyfrowania
    for i in range(1, 21):
        t = rotate_left((B * (2 * B + 1)) % 2**32, 5, 32)
        u = rotate_left((D * (2 * D + 1)) % 2**32, 5, 32)
        A = (rotate_left(A ^ t, u % 32, 32) + S[2 * i]) % 2**32
        C = (rotate_left(C ^ u, t % 32, 32) + S[2 * i + 1]) % 2**32
        A, B, C, D = B, C, D, A  # Permutacja bloków

        print(f"Runda {i}: A={A:08X}, B={B:08X}, C={C:08X}, D={D:08X}")

    # Końcowe dodanie kluczy rundowych
    A = (A + S[42]) % 2**32
    C = (C + S[43]) % 2**32

    # Łączenie zaszyfrowanych bloków w jeden ciąg bajtów (little-endian)
    ciphertext = (
        int(A).to_bytes(4, byteorder='little') +
        int(B).to_bytes(4, byteorder='little') +
        int(C).to_bytes(4, byteorder='little') +
        int(D).to_bytes(4, byteorder='little')
    )
    return ciphertext

key = bytes.fromhex('4000000000000000000000000000000000000000000000000000000000000000')
plaintext = bytes.fromhex('00000000000000000000000000000000')  # 128-bitowy plaintext

key_array = key_schedule(key)
outCiphertext = RC6_encrypt(plaintext, key_array)

print("Szyfrogram (little-endian):")
print(outCiphertext.hex().upper())

ciphertext_big_endian = outCiphertext[::-1]
print("Szyfrogram (big-endian):")
print(ciphertext_big_endian.hex().upper())
